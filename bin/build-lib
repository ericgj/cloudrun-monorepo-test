#!/usr/bin/env python

# Note: python2.7 compatible for gcloud builder

from __future__ import print_function
from argparse import ArgumentParser, ArgumentTypeError
import os
import os.path
import shutil
import subprocess
import sys

def mkdir_p(d):
    if os.path.exists(d) and os.path.isdir(d):
        return
    os.makedirs(d)

# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------


def main(parser, argv=sys.argv[1:]):
    args = parser.parse_args(argv)
    mkdir_p(args.build_dir)
    if args.packages is None:
        for p in all_packages(args.lib_dir):
            build_package(p, args.build_dir)
    else:
        for p in args.packages:
            build_package(p, args.build_dir)


def build_package(path, build_dir):
    subprocess.check_call(
        ["pip","wheel", path, "-w", build_dir],
        stderr=sys.stderr, stdout=sys.stdout, shell=False
    )

def all_packages(source_dir):
    """ 
    Note: packages are detected by presence of setup.py in root, unless
    package already detected in an ancestor directory.
    """
    ret = []
    for (root, dirs, files) in os.walk(source_dir):
        if "setup.py" in files and not any(filter(lambda p: root.startswith(p), ret)):
            ret.append(root)
    return ret

# ------------------------------------------------------------------------------
# ARGUMENT PARSER
# ------------------------------------------------------------------------------

parser = ArgumentParser(description="Build local package(s)")
parser.add_argument("--lib-dir", default="lib", help="package source root directory")
parser.add_argument("--build-dir", default="lib", help="package (wheel) build directory")
parser.add_argument("-p", "--package", nargs="*", dest="packages", help="package(s) to build")

if __name__ == "__main__":
    main(parser)

